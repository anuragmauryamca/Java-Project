/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ezeon.capp.gui;

import ezeon.capp.domain.Contact;
import ezeon.capp.service.ContactService;
import ezeon.capp.service.ContactServiceImpl;
import static java.awt.Frame.ICONIFIED;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Anurag
 */
public class UserFrame extends javax.swing.JFrame {
    //Has a Relation;Link service Layer with GuI
    ContactService contactService=new ContactServiceImpl();
    

    /**
     * Creates new form UserFrame
     */
    public UserFrame() {
        initComponents();//After gui initilization-
         MyTableModel myTableModel=new MyTableModel();
     tableListContact.setModel(myTableModel);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btnAdd = new javax.swing.JButton();
        btnList = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        tfsearch = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableListContact = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        tfSearch = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mFile = new javax.swing.JMenu();
        miAddContact = new javax.swing.JMenuItem();
        miListContact = new javax.swing.JMenuItem();
        miExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Welcome User");
        setBackground(new java.awt.Color(0, 153, 102));
        setMaximizedBounds(new java.awt.Rectangle(455, 89, 90, 600));

        jToolBar1.setRollover(true);

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ezeon/capp/gui/icon/todo_list_add.png"))); // NOI18N
        btnAdd.setToolTipText("Add_Contact");
        btnAdd.setFocusable(false);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAdd);

        btnList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ezeon/capp/gui/icon/Paul-33-128.png"))); // NOI18N
        btnList.setToolTipText("List_Contact");
        btnList.setFocusable(false);
        btnList.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnList.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListActionPerformed(evt);
            }
        });
        jToolBar1.add(btnList);

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ezeon/capp/gui/icon/if_edit_1927214 (1).png"))); // NOI18N
        btnEdit.setText("Edit_Contact");
        btnEdit.setToolTipText("Edit_Contact");
        btnEdit.setFocusable(false);
        btnEdit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEdit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnEdit);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ezeon/capp/gui/icon/trash.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setToolTipText("Delete");
        btnDelete.setFocusable(false);
        btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDelete);

        tfsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfsearchKeyReleased(evt);
            }
        });

        tableListContact.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableListContact);

        tfSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ezeon/capp/gui/icon/images1.png"))); // NOI18N
        tfSearch.setText("Find");
        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfSearchKeyReleased(evt);
            }
        });

        mFile.setText("File");

        miAddContact.setText("Add Contact");
        miAddContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAddContactActionPerformed(evt);
            }
        });
        mFile.add(miAddContact);

        miListContact.setText("List Contact");
        mFile.add(miListContact);

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        mFile.add(miExit);

        jMenuBar1.add(mFile);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tfSearch)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 904, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(tfsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tfsearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
       this.dispose();//close current frame
    }//GEN-LAST:event_miExitActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        openContactForm();
            MyTableModel myTableModel=new MyTableModel();
     tableListContact.setModel(myTableModel);
        
        
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void miAddContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAddContactActionPerformed
        openContactForm();
        
    }//GEN-LAST:event_miAddContactActionPerformed

    private void btnListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListActionPerformed
     MyTableModel myTableModel=new MyTableModel();
     tableListContact.setModel(myTableModel);
     
    
    }//GEN-LAST:event_btnListActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
      int rowCount=tableListContact.getRowCount();
               Boolean flag=false;                                //sir table name is myTableModel
      for(int i=0;i<rowCount;i++){
          Boolean ischecked=(Boolean) tableListContact.getValueAt(i,0);//check box
          if(ischecked){
              Integer cid=(Integer) tableListContact.getValueAt(i,1);//cid column
              try {
                  contactService.delete(cid);
                  flag=true;
              } catch (SQLException ex) {
                 ex.printStackTrace();
              }
              
              
          }
      }
      
      if(flag){ 
          //at list one record is deleted form above loop now relod the contact table
             MyTableModel myTableModel=new MyTableModel();//prepared_table ki jagha sir ke
     tableListContact.setModel(myTableModel);
      }
      
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tfsearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfsearchKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tfsearchKeyReleased

    private void tfSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchKeyReleased
        // TODO add your handling code here:
        String text=tfSearch.getText();
        Integer userId=LoginDialog.loggedinUser.getUserId();
        try {
            //found contacts
            List<Contact> contacts=contactService.find(userId, text);
            MyTableModel myTab=new MyTableModel(contacts);
          // myTableModel=new MyTableModel(contacts);
            tableListContact.setModel(myTab);
        } catch (SQLException ex) {
           ex.printStackTrace();
        }
        
        
        
    }//GEN-LAST:event_tfSearchKeyReleased

    void openContactForm(){
        ContactFormDialog d=new ContactFormDialog(this,true);
        
        d.setLocationRelativeTo(this);
        d.setVisible(true);
        
    }
     //costomized Table Model=inner class
    
    class MyTableModel extends DefaultTableModel{
        
        Vector cols;//header
        Vector<Vector> data;//row
        public MyTableModel(){
            initCols();
            initData();
            //set all data in table model for final model
            super.setDataVector(data, cols);
            
           addDataChangeListener();
            
            
        }
        public MyTableModel(List<Contact> contacts){
            initCols();
           
            //set all data in table model for final model
            data=toDataVector(contacts);
            super.setDataVector(data, cols);
            
           addDataChangeListener();
            
            
        }
        void addDataChangeListener(){
             //Register event to listen for data chngne cell vlaue
            this.addTableModelListener(new TableModelListener() {
                @Override
                public void tableChanged(TableModelEvent e) {
                   int row=e.getFirstRow();
                   int column=e.getColumn();
                   
                   Object updatedValue=MyTableModel.this.getValueAt(row,column);
                   String colName=null;//database  contact table
                   if(column==2){
                       colName="name";
                   }else if(column==3){
                       colName="phone";
                   }
                   else if(column==4){
                       colName="email";
                   }
                   else if(column==5){
                       colName="address";
                   }
                   else if(column==6){
                       colName="remark";
                   }
                  if(colName!=null){
                      Integer cid=(Integer) MyTableModel.this.getValueAt(row,1);//cid column
                       try {
                           contactService.update(colName,updatedValue,cid);
                       } catch (SQLException ex) { 
                           ex.printStackTrace();
                       }
                  }
                   
                   
                }
            });
        }
        void initCols(){
            cols=new Vector();
            cols.add("SELECT");
            cols.add("CID");
            cols.add("NAME");
            cols.add("PHONE");
            cols.add("EMAIL");
            cols.add("ADDRESS");
            cols.add("REMARK");
        }
        void initData(){
            
            try {
                
                Integer userId=LoginDialog.loggedinUser.getUserId();
                List<Contact> contacts=contactService.findByUserId(userId);
               data=toDataVector(contacts);
                
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        /**
         * convert contact to vector 
         * @param c
         * @return 
         */
        
        
        Vector mapVector(Contact c){
            Vector v=new Vector();
            v.add(false);//check box
            v.add(c.getContactId());
            v.add(c.getName());
            v.add(c.getPhone());
            v.add(c.getEmail());
            v.add(c.getAddress());
            v.add(c.getRemark());
            return v;
            
        }
        
        Vector<Vector> toDataVector(List<Contact> contacts){
            Vector<Vector> data=new Vector();
            for(Contact c: contacts){
                data.add(this.mapVector(c));
                
            }
            return data;
            
        }
        /**
         * This method changed the type of first column to jcheckbox 
         * @param columnIndex
         * @return 
         */

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            if(columnIndex==0){
                //first column type is boolean
                return Boolean.class;//check box column
            }
            return super.getColumnClass(columnIndex); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            if(column==1){
                //cid is not editable
                return false;
                
            }else{
                return true;
            }
        }
        
        
    }
    //////////////End////////////
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnList;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenu mFile;
    private javax.swing.JMenuItem miAddContact;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miListContact;
    private javax.swing.JTable tableListContact;
    private javax.swing.JButton tfSearch;
    private javax.swing.JTextField tfsearch;
    // End of variables declaration//GEN-END:variables
}
